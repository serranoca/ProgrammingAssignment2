gwtwd*()
getwd()
ls()
d <- rbind(c(2, 4), c(1, 3))
ls(0)
ls()
makeCacheMatrix <- function(x = matrix()) {
xInv <- NULL
setmatrix <- function(y) {
x <<- y
xInv <<- NULL
}
getmatrix <-  function() x
setinverse <- function(inverse) xInv<<- inverse
getinverse <- function() xInv
list(setmatrix = setmatrix, getmatrix = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
xInv <- x$getinverse()
if(!is.null(xInv)) {
message("getting cached inverse matrix")
return(xInv)
}
data <- x$getmatrix()
xInv <- solve(data, ...)
x$setinverse(xInv)
xInv
}
ls()
class(d)
test <- makecacheMatrix(d)
test <- makeCacheMatrix(d)
class(test)
test
test$getmatrix()
ls()
cacheSolve(d)
cacheSolve(test)
cache(solve(test))
cacheSolve(test)
d <- rbind(c(2, 4), c(1, 3))
d <- rbind(c(2, 4, 3, 4), c(1, 3, 9, 3), c(8, 5, 2, 9), c(2, 3, 6, 8))
d
test <- makeCacheMatrix(d)
ls()
d
makeCacheMatrix <- function(x = matrix()) {
xInv <- NULL
setmatrix <- function(y) {
x <<- y
xInv <<- NULL
}
getmatrix <-  function() x
setinverse <- function(inverse) xInv<<- inverse
getinverse <- function() xInv
list(setmatrix = setmatrix, getmatrix = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
xInv <- x$getinverse()
if(!is.null(xInv)) {
message("getting cached inverse matrix")
return(xInv)
}
data <- x$getmatrix()
xInv <- solve(data, ...)
x$setinverse(xInv)
xInv
}
ls()
test <- makeCacheMatrix(d)
test
test$getmatrix()
ls()
cacheSolve(test)
cacheSolve(test)
getwd()
